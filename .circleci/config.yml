version: 2.1

orbs:
  win: circleci/windows@5.0.0
  macos: circleci/macos@2.4.1

commands:
  run-cibuildwheel:
    parameters:
      cibw-version:
        type: string
        default: 2.17.0
    steps:
      - run:
          name: run cibuildwheel
          shell: bash -eo pipefail
          command: |
            if [[ $OS == Windows_NT ]]; then
              python -m pip install --user cibuildwheel==<< parameters.cibw-version >>
              python -m cibuildwheel --output-dir dist
            else
              python3 -m pip install --user cibuildwheel==<< parameters.cibw-version >>
              python3 -m cibuildwheel --output-dir dist
            fi

      - store_artifacts: &store-artifacts
          path: ./dist
      - persist_to_workspace: &persist-to-workspace
          root: ./dist/
          paths: .

environment: &global-environment
  PIP_PROGRESS_BAR: 'off'

jobs:
  python-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: cimg/python:3.9

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: x86_64

    steps:
      - checkout
      - setup_remote_docker
      - run-cibuildwheel

  python-linux-aarch64:
    parameters:
      python-version:
        type: string

    machine:
      image: ubuntu-2004:202101-01

    resource_class: arm.medium

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_LINUX: aarch64

    steps:
      - checkout
      - run-cibuildwheel

  python-linux-debug:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            pip install -r tests/requirements.txt

      - run:
          name: build with -Werror
          command: |
            . env/bin/activate
            CFLAGS="-Werror" python setup.py build_ext --inplace

      - run:
          name: build with -Werror and -UNDEBUG
          command: |
            . env/bin/activate
            CFLAGS="-UNDEBUG -Werror" python setup.py build_ext --inplace --force

      - run:
          name: run tests
          command: |
            . env/bin/activate
            python -m unittest

  python-macOS:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1

    parameters:
      python-version:
        type: string
      cibw-arch:
        type: string

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_MACOS: << parameters.cibw-arch >>

    steps:
      - checkout
      - macos/install-rosetta
      - run-cibuildwheel

  python-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    environment:
      <<: *global-environment
      CIBW_PROJECT_REQUIRES_PYTHON: ~=<< parameters.python-version>>
      CIBW_ARCHS_WINDOWS: AMD64

    steps:
      - checkout
      - run-cibuildwheel

  python-sdist:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout
      - run:
          name: build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            python setup.py sdist -d ./dist
      - store_artifacts: *store-artifacts
      - persist_to_workspace: *persist-to-workspace
      - run:
          name: install from sdist
          command: |
            rm -r env
            python -m venv env
            . env/bin/activate
            pip install dist/dwave-optimization*.tar.gz
      - run:
          name: test with install from sdist
          command: |
            . env/bin/activate
            cd tests/
            pip install -r requirements.txt
            python -m unittest

  cpp-linux:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout
      - run:
          name: run cpp tests
          command: |
            FLAGS=-Werror make -C tests/cpp/

  cpp-macOS:
    macos:
      xcode: 15.3.0
    resource_class: macos.m1.medium.gen1

    steps:
      - checkout
      - run:
          name: run cpp tests
          command: |
            FLAGS=-Werror make -C tests/cpp/

  deploy:
    docker:
      - image: cimg/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - store_artifacts:
          path: ./dist

      - run:
          name: deploy
          command: |
            python -m venv env
            . env/bin/activate
            python -m pip install twine
            twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

workflows:
  tests:
    jobs:
      - python-linux: &build-linux
          matrix:
            parameters:
              # versions are built with ~= so the patch version doesn't matter
              python-version: &python-versions [3.8.0, 3.9.0, 3.10.0, 3.11.0, 3.12.0]
      - python-linux-aarch64: *build-linux
      - python-linux-debug
      - python-macOS:
          matrix:
            parameters:
              python-version: *python-versions
              cibw-arch: [x86_64, arm64]
      - python-windows:
          matrix:
            parameters:
              python-version: *python-versions
      - python-sdist
      - cpp-linux
      - cpp-macOS
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
          requires:
            - python-linux
            - python-linux-aarch64
            - python-macOS
            - python-windows
            - python-sdist
